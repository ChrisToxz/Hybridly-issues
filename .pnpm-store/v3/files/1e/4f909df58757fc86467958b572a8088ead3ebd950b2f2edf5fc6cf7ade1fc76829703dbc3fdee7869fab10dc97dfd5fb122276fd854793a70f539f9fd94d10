{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                                Utility Types                               */\n/* -------------------------------------------------------------------------- */\n\n// check if a type is null or undefined\ntype IsNullableOrUndefineable<T> = null extends T ? true : undefined extends T ? true : false\n\n// Removes all possible index signatures from a type\ntype FilterIndexSignatureType<T> = string extends T\n  ? never\n  : number extends T\n  ? never\n  : symbol extends T\n  ? never\n  : T\n\n// Remove the index signature from a type\ntype RemoveIndexSignature<T> = {\n  [K in keyof T as FilterIndexSignatureType<K>]: T[K]\n}\n\n// check if a type has an index signature\ntype HasIndexSignature<T> = string extends keyof T\n  ? true\n  : number extends keyof T\n  ? true\n  : symbol extends keyof T\n  ? true\n  : false\n\ntype GetValidIndexSignature<T> = Exclude<keyof T, symbol> extends infer K\n  ? K extends string | number\n    ? K\n    : never\n  : never\n\n// Keys have to be strings or number and can't contain a dot since we won't be able to differ between and key with a dot and a nested key\ntype RemoveInvalidDotPathKeys<T> = T extends symbol\n  ? never\n  : T extends number\n  ? T\n  : T extends string\n  ? T extends `${infer _K}.${infer _R}`\n    ? never\n    : T\n  : never\n\n// check if a type is an array\ntype IsArray<T> = T extends any[] ? true : false\n\n// check if a array is empty\ntype IsEmptyArray<T> = T extends [] ? true : false\n\n// Get the type of array element\ntype GetArrayElement<T> = T extends (infer U)[] ? U : never\n\n/**\n * check if a type is any\n * @link https://stackoverflow.com/a/49928360/1490091\n */\ntype IsAny<T> = 0 extends 1 & T ? true : false\n\n// check if a type is never\ntype IsNever<T> = [T] extends [never] ? true : false\n\n/**\n * check if a type is unknown\n * @link https://github.com/sindresorhus/type-fest\n */\ntype IsUnknown<T> = IsNever<T> extends true\n  ? false\n  : IsAny<T> extends true\n  ? false\n  : unknown extends T\n  ? true\n  : false\n\n// check if a type is a primitive\ntype IsPrimitive<T> = T extends string | number | boolean | bigint | symbol | undefined | null\n  ? true\n  : false\n\n// remove null and undefined from a type\ntype ExcludeNullUndefined<T> = Exclude<T, null | undefined>\n\n// check if a type is a tuple\ntype IsTuple<T> = T extends [any, ...any[]] ? true : false\n\n// get the length of a tuple\ntype TupleLength<T> = T extends { length: infer L } ? (L extends number ? L : never) : never\n\n// get the type of tuple element\ntype TupleElement<T, N> = N extends keyof T ? T[N] : never\n\n// get all numbers from 0 to L\ntype NumbersToZero<\n  IterationCarry extends unknown[],\n  DepthCarry extends unknown[],\n> = TupleLength<DepthCarry> extends 0\n  ? any\n  : TupleLength<IterationCarry> extends 0\n  ? never\n  :\n      | NumbersToZero<MinusOne<IterationCarry>, MinusOne<DepthCarry>>\n      | TupleLength<MinusOne<IterationCarry>>\n\n// remove readonly from members of a record\ntype Writeable<T> = {\n  -readonly [K in keyof T]: T[K]\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                 Math Types                                 */\n/* -------------------------------------------------------------------------- */\n// We use a tuple to carry our value\n\ntype MinusOne<N extends unknown[]> = N extends [...infer U, unknown] ? U : never\n\ntype BuildTuple<L extends number, T extends unknown[] = []> = T extends {\n  length: L\n}\n  ? T\n  : BuildTuple<L, [...T, unknown]>\n\n/* -------------------------------------------------------------------------- */\n/*                                 Path Types                                 */\n/* -------------------------------------------------------------------------- */\n\n// get all possible paths of a type\ntype GetRecordPaths<\n  T,\n  DepthCarry extends unknown[],\n  K extends keyof T = keyof T,\n> = K extends keyof T\n  ? RemoveInvalidDotPathKeys<K> | `${RemoveInvalidDotPathKeys<K>}.${Path<T[K], DepthCarry>}`\n  : never\n\n// get all possible paths of an array\ntype GetArrayPaths<T, DepthCarry extends unknown[]> = `${number}.${Path<\n  GetArrayElement<T>,\n  DepthCarry\n>}`\n\n// get all possible paths of a tuple\ntype GetTuplePaths<T extends unknown[], DepthCarry extends unknown[]> = NumbersToZero<\n  T,\n  DepthCarry\n> extends infer R\n  ? R extends number\n    ? R | `${R}.${Path<TupleElement<T, R>, DepthCarry>}`\n    : never\n  : never\n\ntype PathStep<T, Depth extends unknown[]> = IsAny<T> extends true\n  ? string\n  : IsUnknown<T> extends true\n  ? never\n  : IsPrimitive<T> extends true\n  ? never\n  : IsTuple<T> extends true\n  ? T extends unknown[]\n    ? GetTuplePaths<T, Depth>\n    : never\n  : IsArray<T> extends true\n  ? (IsEmptyArray<T> extends true ? never : number) | GetArrayPaths<T, Depth>\n  : HasIndexSignature<T> extends true\n  ? GetValidIndexSignature<T> | GetRecordPaths<RemoveIndexSignature<T>, Depth>\n  : GetRecordPaths<T, Depth>\n\n// Final path type\ntype Path<T, DepthCarry extends unknown[]> = TupleLength<DepthCarry> extends 0\n  ? IsPrimitive<T> extends true\n    ? never\n    : any\n  : T extends T\n  ? PathStep<Writeable<ExcludeNullUndefined<T>>, MinusOne<DepthCarry>>\n  : never\n\ntype PathEntry<T, Depth extends number = 10> = Path<T, BuildTuple<Depth>>\n\ntype PathValueStep<T, P, DepthCarry extends unknown[]> = IsAny<T> extends true\n  ? any\n  : IsUnknown<T> extends true\n  ? unknown\n  : IsNullableOrUndefineable<T> extends true\n  ? PathValue<ExcludeNullUndefined<T>, P, DepthCarry> | undefined\n  : IsTuple<T> extends true\n  ? P extends `${infer H}.${infer R}`\n    ? PathValue<TupleElement<T, H>, R, DepthCarry>\n    : TupleElement<T, P>\n  : IsArray<T> extends true\n  ? P extends `${infer _H}.${infer R}`\n    ? PathValue<GetArrayElement<T>, R, DepthCarry> | undefined\n    : GetArrayElement<T> | undefined\n  : P extends `${infer H}.${infer R}`\n  ? H extends keyof T\n    ? PathValue<T[H], R, DepthCarry> | (HasIndexSignature<T> extends true ? undefined : never)\n    : never\n  : P extends keyof T\n  ? T[P] | (HasIndexSignature<T> extends true ? undefined : never)\n  : never\n\n// nearly same function as PathValueEntry, but without constraints for P so it is easier to use in PathValueStep\ntype PathValue<T, P, DepthCarry extends unknown[]> = TupleLength<DepthCarry> extends 0\n  ? IsPrimitive<T> extends true\n    ? never\n    : unknown\n  : T extends T\n  ? PathValueStep<Writeable<T>, P, MinusOne<DepthCarry>>\n  : never\n\n// final path value type\ntype PathValueEntry<T, P extends PathEntry<T, Depth>, Depth extends number = 10> = PathValue<\n  T,\n  P,\n  BuildTuple<Depth>\n>\n\ntype SearchableObject = Record<never, never> | unknown[]\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst hasOwnProperty = Object.prototype.hasOwnProperty\n\n/**\n * Retrieves a value from an object by dot notation. The value is received by optional chaining,\n * therefore this function returns undefined if an intermediate property is undefined.\n *\n * @param object - object to get value from\n * @param path - path to value\n *\n * @privateRemarks\n * The intersection between PathEntry<T, 10>  and string is necessary for TypeScript to successfully narrow down the type of P based on the user-provided path input.\n * Without the intersection, the path would just be of type PathEntry<T, 10> and PathValueEntry would be a union of all possible return types.\n * By using the intersection, TypeScript is forced to apply the PathEntry constraints and infer the type from the provided user input.\n */\n\nfunction getByPath<T extends SearchableObject, P extends PathEntry<T> & string>(\n  object: T,\n  path: P,\n): PathValueEntry<T, P> {\n  const pathArray = (path as string).split('.')\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return pathArray.reduce((current: any, pathPart) => {\n    if (typeof current !== 'object' || !hasOwnProperty.call(current, pathPart)) {\n      return undefined\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n    return current?.[pathPart]\n  }, object)\n}\n\n/**\n * Sets a value in an object by dot notation. If an intermediate property is undefined,\n * this function will throw an error.\n *\n * @param object - object to set value in\n * @param path - path to value\n * @param value - value to set\n *\n * @throws {Error} - if an intermediate property is undefined\n *\n * @privateRemarks\n * The intersection between PathEntry<T, 10>  and string is necessary for TypeScript to successfully narrow down the type of P based on the user-provided path input.\n * Without the intersection, the path would just be of type PathEntry<T, 10> and PathValueEntry would be a union of all possible return types.\n * By using the intersection, TypeScript is forced to apply the PathEntry constraints and infer the type from the provided user input.\n */\nfunction setByPath<\n  T extends SearchableObject,\n  P extends PathEntry<T> & string,\n  V extends PathValueEntry<T, P>,\n>(object: T, path: P, value: V): void {\n  const pathArray = (path as string).split('.')\n  const lastKey = pathArray.pop()\n\n  if (lastKey === undefined) {\n    throw new Error('Path is empty')\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const parentObject = pathArray.reduce((current: any, pathPart) => {\n    if (typeof current !== 'object' || !hasOwnProperty.call(current, pathPart)) {\n      throw new Error(`Property ${pathPart} is undefined`)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n    const next = current?.[pathPart]\n\n    if (next === undefined || next === null) {\n      throw new Error(`Property ${pathPart} is undefined`)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return next\n  }, object)\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  parentObject[lastKey] = value\n}\n\nexport type { PathEntry as Path, PathValueEntry as PathValue, SearchableObject }\n\nexport { getByPath, setByPath }\n"],"names":["hasOwnProperty","getByPath","object","path","current","pathPart","setByPath","value","pathArray","lastKey","parentObject","next"],"mappings":"AA6NA,MAAMA,IAAiB,OAAO,UAAU;AAexC,SAASC,EACPC,GACAC,GACsB;AAItB,SAHmBA,EAAgB,MAAM,GAAG,EAG3B,OAAO,CAACC,GAAcC,MAAa;AAC9C,QAAA,SAAOD,KAAY,YAAY,CAACJ,EAAe,KAAKI,GAASC,CAAQ;AAKzE,aAAOD,KAAA,gBAAAA,EAAUC;AAAA,KAChBH,CAAM;AACX;AAiBA,SAASI,EAIPJ,GAAWC,GAASI,GAAgB;AAC9B,QAAAC,IAAaL,EAAgB,MAAM,GAAG,GACtCM,IAAUD,EAAU;AAE1B,MAAIC,MAAY;AACR,UAAA,IAAI,MAAM,eAAe;AAIjC,QAAMC,IAAeF,EAAU,OAAO,CAACJ,GAAcC,MAAa;AAC5D,QAAA,OAAOD,KAAY,YAAY,CAACJ,EAAe,KAAKI,GAASC,CAAQ;AACvE,YAAM,IAAI,MAAM,YAAYA,CAAQ,eAAe;AAI/C,UAAAM,IAAOP,KAAA,gBAAAA,EAAUC;AAEnB,QAAsBM,KAAS;AACjC,YAAM,IAAI,MAAM,YAAYN,CAAQ,eAAe;AAI9C,WAAAM;AAAA,KACNT,CAAM;AAGT,EAAAQ,EAAaD,CAAO,IAAIF;AAC1B;"}